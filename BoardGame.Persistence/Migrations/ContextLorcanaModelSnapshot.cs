// <auto-generated />
using System;
using BoardGame.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BoardGame.Persistence.Migrations
{
    [DbContext(typeof(ContextLorcana))]
    partial class ContextLorcanaModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("boardGame.Carta", b =>
                {
                    b.Property<int>("CartaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartaId"));

                    b.Property<int>("Cor")
                        .HasColumnType("integer");

                    b.Property<int>("Custo")
                        .HasColumnType("integer");

                    b.Property<int>("DeckId")
                        .HasColumnType("integer");

                    b.Property<string>("Descrição")
                        .HasColumnType("text");

                    b.Property<int?>("EfeitoId")
                        .HasColumnType("integer");

                    b.Property<int?>("JogadorId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<int>("Número")
                        .HasColumnType("integer");

                    b.Property<bool>("PodeVirarTinta")
                        .HasColumnType("boolean");

                    b.Property<int>("Raridade")
                        .HasColumnType("integer");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("CartaId");

                    b.HasIndex("DeckId");

                    b.HasIndex("EfeitoId");

                    b.HasIndex("JogadorId");

                    b.ToTable("Cartas");
                });

            modelBuilder.Entity("boardGame.Deck", b =>
                {
                    b.Property<int>("DeckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DeckId"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DeckId");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("boardGame.Efeito", b =>
                {
                    b.Property<int>("EfeitoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EfeitoId"));

                    b.Property<string>("Descrição")
                        .HasColumnType("text");

                    b.Property<int?>("PontosDeAtaque")
                        .HasColumnType("integer");

                    b.Property<int?>("PontosDeDefesa")
                        .HasColumnType("integer");

                    b.HasKey("EfeitoId");

                    b.ToTable("Efeitos");
                });

            modelBuilder.Entity("boardGame.Jogador", b =>
                {
                    b.Property<int>("JogadorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JogadorId"));

                    b.Property<int>("DeckId")
                        .HasColumnType("integer");

                    b.Property<int?>("JogoId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.HasKey("JogadorId");

                    b.HasIndex("DeckId");

                    b.HasIndex("JogoId");

                    b.ToTable("Jogadores");
                });

            modelBuilder.Entity("boardGame.Jogo", b =>
                {
                    b.Property<int>("JogoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JogoId"));

                    b.Property<int>("JogadorNaVezJogadorId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TurnoId")
                        .HasColumnType("integer");

                    b.HasKey("JogoId");

                    b.HasIndex("JogadorNaVezJogadorId");

                    b.ToTable("Jogos");
                });

            modelBuilder.Entity("boardGame.Turno", b =>
                {
                    b.Property<int>("TurnoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TurnoId"));

                    b.Property<int?>("JogoId")
                        .HasColumnType("integer");

                    b.HasKey("TurnoId");

                    b.HasIndex("JogoId");

                    b.ToTable("Turnos");
                });

            modelBuilder.Entity("boardGame.Carta", b =>
                {
                    b.HasOne("boardGame.Deck", "Deck")
                        .WithMany("Cartas")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("boardGame.Efeito", "Efeito")
                        .WithMany()
                        .HasForeignKey("EfeitoId");

                    b.HasOne("boardGame.Jogador", null)
                        .WithMany("CartasNaMão")
                        .HasForeignKey("JogadorId");

                    b.Navigation("Deck");

                    b.Navigation("Efeito");
                });

            modelBuilder.Entity("boardGame.Jogador", b =>
                {
                    b.HasOne("boardGame.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("boardGame.Jogo", null)
                        .WithMany("Jogadores")
                        .HasForeignKey("JogoId");

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("boardGame.Jogo", b =>
                {
                    b.HasOne("boardGame.Jogador", "JogadorNaVez")
                        .WithMany()
                        .HasForeignKey("JogadorNaVezJogadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JogadorNaVez");
                });

            modelBuilder.Entity("boardGame.Turno", b =>
                {
                    b.HasOne("boardGame.Jogo", null)
                        .WithMany("Turnos")
                        .HasForeignKey("JogoId");
                });

            modelBuilder.Entity("boardGame.Deck", b =>
                {
                    b.Navigation("Cartas");
                });

            modelBuilder.Entity("boardGame.Jogador", b =>
                {
                    b.Navigation("CartasNaMão");
                });

            modelBuilder.Entity("boardGame.Jogo", b =>
                {
                    b.Navigation("Jogadores");

                    b.Navigation("Turnos");
                });
#pragma warning restore 612, 618
        }
    }
}
